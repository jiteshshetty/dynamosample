{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Intro:DynamoDB - AWS Training",
    "Mappings": {
        "AWSInstanceType2Arch": {
            "c1.medium": {
                "Arch": "64"
            },
            "c1.xlarge": {
                "Arch": "64"
            },
            "cc1.4xlarge": {
                "Arch": "64"
            },
            "m1.small": {
                "Arch": "64"
            },
            "m1.medium": {
                "Arch": "64"
            },
            "m1.large": {
                "Arch": "64"
            },
            "m1.xlarge": {
                "Arch": "64"
            },
            "m2.2xlarge": {
                "Arch": "64"
            },
            "m2.4xlarge": {
                "Arch": "64"
            },
            "m2.xlarge": {
                "Arch": "64"
            },
            "t1.micro": {
                "Arch": "64"
            }
        },
        "AWSRegionArch2AMI": {
            "ap-northeast-1": {
                "32": "ami-087acb09",
                "64": "ami-e47acbe5"
            },
            "ap-southeast-1": {
                "32": "ami-b83374ea",
                "64": "ami-be3374ec"
            },
            "ap-southeast-2": {
                "32": "ami-b3990e89",
                "64": "ami-bd990e87"
            },
            "eu-west-1": {
                "32": "ami-fd231b89",
                "64": "ami-f9231b8d"
            },
            "sa-east-1": {
                "32": "ami-aa855bb7",
                "64": "ami-a6855bbb"
            },
            "us-east-1": {
                "32": "ami-ed65ba84",
                "64": "ami-e565ba8c"
            },
            "us-west-1": {
                "32": "ami-978cd4d2",
                "64": "ami-e78cd4a2"
            },
            "us-west-2": {
                "32": "ami-38c64a08",
                "64": "ami-3ac64a0a"
            }
        }
    },
    "Outputs": {
        "Instance": {
            "Description": "DNS Name of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "Ec2Instance",
                    "PublicDnsName"
                ]
            }
        }
    },
    "Parameters": {
        "InstanceType": {
            "Default": "t1.micro",
            "Description": "EC2 instance type, e.g. m1.small, m1.large, etc.",
            "Type": "String"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the web server",
            "Type": "String"
        },
        "AWSAccessKey": {
            "Type": "String"
        },
        "AWSSecretAccessKey": {
            "Type": "String"
        }
    },
    "Resources": {
        "Ec2Instance": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/home/ec2-user/.aws-credentials": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "AWSAccessKeyId=",
                                            {
                                                "Ref": "AWSAccessKey"
                                            },
                                            "\n",
                                            "AWSSecretKey=",
                                            {
                                                "Ref": "AWSSecretAccessKey"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "ec2-user",
                                "mode": "000600",
                                "owner": "ec2-user"
                            },
                            "/var/www/html/dynamosample/config.js": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "var config=exports;",
                                            "\n",
                                            "config.aws_region='",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "';\n",
                                            "config.aws_access_key='",
                                            {
                                                "Ref": "AWSAccessKey"
                                            },
                                            "';\n",
                                            "config.aws_secret_key='",
                                            {
                                                "Ref": "AWSSecretAccessKey"
                                            },
                                            "';\n",
                                            "config.user_feeds_table='",
                                            {
                                                "Ref": "UserFeedsTable"
                                            },
                                            "';\n",
                                            "config.feeds_table='",
                                            {
                                                "Ref": "FeedsTable"
                                            },
                                            "';\n",
                                            "config.user_data_table='",
                                            {
                                                "Ref": "UserDataTable"
                                            },
                                            "';\n",
                                            "config.twitter_stream_client='./dummy_twitter_stream_client';\n",
                                            "config.ws_port=10080;",
                                            "\n",
                                            "config.redis_port=6379;",
                                            "\n",
                                            "config.redis_host='localhost';",
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000600",
                                "owner": "root"
                            }
                        },
                        "sources": {
                            "/var/www/html/dynamosample": "https://github.com/kntyskw/dynamosample/tarball/master"
                        },
                        "packages": {
                            "yum": {
                                "git": [],
                                "gcc": [],
                                "make": [],
                                "httpd": [],
                                "php": [],
                                "php-xml": []
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "httpd": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "packages": {
                                        "yum": [
                                            "httpd",
                                            "php"
                                        ]
                                    }
                                },
                                "redis": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref": "InstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "Ec2SecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "# Get Updates _Before_ CfnInit Runs\n",
                                "#yum update -y\n",
                                "# Helper function\n",
                                "function error_exit \n",
                                "{\n",
                                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                                {
                                    "Ref": "WaitHandle"
                                },
                                "'\n",
                                "  exit 1\n",
                                "}\n",
                                "yum -y --enablerepo=epel install nodejs npm redis\n",
                                "echo 'export AWS_ACCESS_KEY=",
                                {
                                    "Ref": "AWSAccessKey"
                                },
                                "'  >> /home/ec2-user/.bash_profile\n",
                                "echo 'export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY' >> /home/ec2-user/.bash_profile\n",
                                "echo 'export AWS_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "'  >> /home/ec2-user/.bash_profile\n",
                                "echo 'export AWS_SECRET_ACCESS_KEY=",
                                {
                                    "Ref": "AWSSecretAccessKey"
                                },
                                "'  >> /home/ec2-user/.bash_profile\n",
                                "echo 'export AWS_SECRET_KEY=$AWS_SECRET_ACCESS_KEY' >> /home/ec2-user/.bash_profile\n",
                                "echo 'export AWS_CLOUDFORMATION_HOME=/opt/aws/apitools/cfn' >> /home/ec2-user/.bash_profile\n",
                                "echo 'export PATH=$AWS_CLOUDFORMATION_HOME/bin:$PATH' >> /home/ec2-user/.bash_profile\n",
                                "echo 'export PATH=/opt/aws/bin:$PATH' >> /home/ec2-user/.bash_profile\n",
                                "echo 'export AWS_CREDENTIALS_FILE=/home/ec2-user/.aws-credentials' >> /home/ec2-user/.bash_profile\n",
                                "echo 'export AWS_CREDENTIAL_FILE=$AWS_CREDENTIALS_FILE' >> /home/ec2-user/.bash_profile\n",
                                "# Install packages and write files in AWS::CloudFormation::Init\n",
                                "/opt/aws/bin/cfn-init -s ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " -r Ec2Instance ",
                                "    --access-key ",
                                {
                                    "Ref": "AWSAccessKey"
                                },
                                "    --secret-key ",
                                {
                                    "Ref": "AWSSecretAccessKey"
                                },
                                "    --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " || error_exit 'Failed to run cfn-init'\n",
                                "# Get Updates _After_ CfnInit Runs\n",
                                "#yum update -y\n",
                                "# Configure php\n",
                                "cat 'date.timezone = UTC' >> /etc/php.ini\n",
                                "WEBROOT=/var/www/html/dynamosample\n",
                                "pushd $WEBROOT\n",
                                "HOME=/root sh composer.sh\n",
                                "HOSTNAME=`curl http://169.254.169.254/latest/meta-data/public-hostname`\n",
                                "sed -e \"s/your_domain/$HOSTNAME/\" common-sample.inc.php > common.inc.php\n",
                                "sed -ie \"s/your_websocket_domain/$HOSTNAME:10080/\" common.inc.php\n",
                                "sed -ie \"s/USER_FEEDS_TABLE/",
                                {
                                    "Ref": "UserFeedsTable"
                                },
                                "/\" common.inc.php\n",
                                "sed -ie \"s/FEEDS_TABLE/",
                                {
                                    "Ref": "FeedsTable"
                                },
                                "/\" common.inc.php\n",
                                "sed -ie \"s/USER_DATA_TABLE/",
                                {
                                    "Ref": "UserDataTable"
                                },
                                "/\" common.inc.php\n",
                                "SDKROOT=$WEBROOT/vendor/amazonwebservices/aws-sdk-for-php\n",
                                "cp $SDKROOT/config-sample.inc.php $SDKROOT/config.inc.php\n",
                                "chown -R ec2-user $WEBROOT\n",
                                "# Start nodejs part of the sample app\n",
                                "chown apache $WEBROOT/common.inc.php\n",
                                "npm install\n",
                                "sed -i '/check to see if should retry request/c\\///' ./node_modules/dynode/lib/dynode/client.js\n",
                                "# Start servers\n",
                                "echo 'export AWS_ACCESS_KEY=",
                                {
                                    "Ref": "AWSAccessKey"
                                },
                                "'  >> /etc/sysconfig/httpd\n",
                                "echo 'export AWS_SECRET_KEY=",
                                {
                                    "Ref": "AWSSecretAccessKey"
                                },
                                "'  >> /etc/sysconfig/httpd\n",
                                "echo 'export AWS_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "'  >> /etc/sysconfig/httpd\n",
                                "/etc/init.d/httpd restart\n",
                                "node streamer.js >& /var/log/streamer.log &\n",
                                "# All went well so signal success\n",
                                "/opt/aws/bin/cfn-signal -e 0 -r \"cfn-int setup complete\" '",
                                {
                                    "Ref": "WaitHandle"
                                },
                                "'\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "UserFeedsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "KeySchema": {
                    "HashKeyElement": {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    },
                    "RangeKeyElement": {
                        "AttributeName": "time",
                        "AttributeType": "N"
                    }
                },
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "2",
                    "WriteCapacityUnits": "2"
                }
            }
        },
        "FeedsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "KeySchema": {
                    "HashKeyElement": {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                },
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "2",
                    "WriteCapacityUnits": "2"
                }
            }
        },
        "UserDataTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "KeySchema": {
                    "HashKeyElement": {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                },
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "1",
                    "WriteCapacityUnits": "1"
                }
            }
        },
        "Ec2SecurityGroup": {
            "Properties": {
                "GroupDescription": "SSH access on port 80 and 22",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "10080",
                        "IpProtocol": "tcp",
                        "ToPort": "10080"
                    }
                ]
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Properties": {
                "Handle": {
                    "Ref": "WaitHandle"
                },
                "Timeout": "1800"
            }
        },
        "WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }
    }
}